/**
 * generated by Xtext 2.11.0
 */
package edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.impl;

import edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.BackwardEReference;
import edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.KampRuleLanguagePackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tools.vitruv.dsls.mirbase.mirBase.MetaclassReference;
import tools.vitruv.dsls.mirbase.mirBase.MetamodelImport;
import tools.vitruv.dsls.mirbase.mirBase.MirBasePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Backward EReference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.impl.BackwardEReferenceImpl#getMetamodel <em>Metamodel</em>}</li>
 *   <li>{@link edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.impl.BackwardEReferenceImpl#getMetaclass <em>Metaclass</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BackwardEReferenceImpl extends PropagationReferenceImpl implements BackwardEReference
{
  /**
   * The cached value of the '{@link #getMetamodel() <em>Metamodel</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetamodel()
   * @generated
   * @ordered
   */
  protected MetamodelImport metamodel;

  /**
   * The cached value of the '{@link #getMetaclass() <em>Metaclass</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetaclass()
   * @generated
   * @ordered
   */
  protected EClass metaclass;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BackwardEReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KampRuleLanguagePackage.Literals.BACKWARD_EREFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelImport getMetamodel()
  {
    if (metamodel != null && metamodel.eIsProxy())
    {
      InternalEObject oldMetamodel = (InternalEObject)metamodel;
      metamodel = (MetamodelImport)eResolveProxy(oldMetamodel);
      if (metamodel != oldMetamodel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, KampRuleLanguagePackage.BACKWARD_EREFERENCE__METAMODEL, oldMetamodel, metamodel));
      }
    }
    return metamodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelImport basicGetMetamodel()
  {
    return metamodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMetamodel(MetamodelImport newMetamodel)
  {
    MetamodelImport oldMetamodel = metamodel;
    metamodel = newMetamodel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KampRuleLanguagePackage.BACKWARD_EREFERENCE__METAMODEL, oldMetamodel, metamodel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMetaclass()
  {
    if (metaclass != null && metaclass.eIsProxy())
    {
      InternalEObject oldMetaclass = (InternalEObject)metaclass;
      metaclass = (EClass)eResolveProxy(oldMetaclass);
      if (metaclass != oldMetaclass)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, KampRuleLanguagePackage.BACKWARD_EREFERENCE__METACLASS, oldMetaclass, metaclass));
      }
    }
    return metaclass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass basicGetMetaclass()
  {
    return metaclass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMetaclass(EClass newMetaclass)
  {
    EClass oldMetaclass = metaclass;
    metaclass = newMetaclass;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KampRuleLanguagePackage.BACKWARD_EREFERENCE__METACLASS, oldMetaclass, metaclass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METAMODEL:
        if (resolve) return getMetamodel();
        return basicGetMetamodel();
      case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METACLASS:
        if (resolve) return getMetaclass();
        return basicGetMetaclass();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METAMODEL:
        setMetamodel((MetamodelImport)newValue);
        return;
      case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METACLASS:
        setMetaclass((EClass)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METAMODEL:
        setMetamodel((MetamodelImport)null);
        return;
      case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METACLASS:
        setMetaclass((EClass)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METAMODEL:
        return metamodel != null;
      case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METACLASS:
        return metaclass != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == MetaclassReference.class)
    {
      switch (derivedFeatureID)
      {
        case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METAMODEL: return MirBasePackage.METACLASS_REFERENCE__METAMODEL;
        case KampRuleLanguagePackage.BACKWARD_EREFERENCE__METACLASS: return MirBasePackage.METACLASS_REFERENCE__METACLASS;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == MetaclassReference.class)
    {
      switch (baseFeatureID)
      {
        case MirBasePackage.METACLASS_REFERENCE__METAMODEL: return KampRuleLanguagePackage.BACKWARD_EREFERENCE__METAMODEL;
        case MirBasePackage.METACLASS_REFERENCE__METACLASS: return KampRuleLanguagePackage.BACKWARD_EREFERENCE__METACLASS;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //BackwardEReferenceImpl
