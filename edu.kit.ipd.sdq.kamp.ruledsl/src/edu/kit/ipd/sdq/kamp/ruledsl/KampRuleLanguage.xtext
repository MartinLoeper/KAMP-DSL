grammar edu.kit.ipd.sdq.kamp.ruledsl.KampRuleLanguage with tools.vitruv.dsls.mirbase.MirBase
hidden(WS, SL_COMMENT)

generate kampRuleLanguage "http://www.kit.edu/ipd/sdq/kamp/ruledsl/KampRuleLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirbase

RuleFile:
	MirBaseFile
	'plugin-name' ':' name=ValidID
	(rules+=KampRule)+
;

KampRule:
	'rule' name=ID ':'
	source=UnnamedMetaclassReference
	(lookups+=Lookup)+
	';'
;

Lookup:
	PropagationReference
	// | CustomLookup
	// | CollectElements
;

PropagationReference:
	ForwardEReference
	| BackwardEReference
;

ForwardEReference:
	'->' feature=[ecore::EReference]
;

BackwardEReference:
	'<-' MetaclassReference '[' feature=[ecore::EStructuralFeature|ValidID] ']'
;

// Code for ideas: Collect element is all elements that can be obtained by the given type of reference until
// (or while) a predicate holds 
/*CollectElements:
	{CollectElements}
	'all-successors'
		feature=[ecore::EReference]
		(predicate=XBlockExpression)?
;


// custom Xbase code for resolving a reference
CustomLookup:
	'op' op=[LookupOperation]
	(
		'(' (
			(arguments+=XExpression) (',' arguments+=XExpression)*
		)? ')'
	)?
;

LookupOperation:
	'lookup' name=ValidID
	(
		'(' (
			(parameters+=FullJvmFormalParameter) (',' parameters+=FullJvmFormalParameter)*
		)? ')'
	)?
	'from' source=UnnamedMetaclassReference
	body=XBlockExpression
;*/