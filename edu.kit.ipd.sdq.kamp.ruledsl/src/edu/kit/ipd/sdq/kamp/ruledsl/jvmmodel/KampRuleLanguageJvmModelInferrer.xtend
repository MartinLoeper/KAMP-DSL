/*
 * generated by Xtext 2.10.0
 */
package edu.kit.ipd.sdq.kamp.ruledsl.jvmmodel

import com.google.inject.Inject
import edu.kit.ipd.sdq.kamp.architecture.AbstractArchitectureVersion
import edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.BackwardEReference
import edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.ForwardEReference
import edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.KampRule
import edu.kit.ipd.sdq.kamp.ruledsl.kampRuleLanguage.Lookup
import edu.kit.ipd.sdq.kamp.ruledsl.support.ChangePropagationStepRegistry
import edu.kit.ipd.sdq.kamp.ruledsl.support.IRule
import edu.kit.ipd.sdq.kamp.ruledsl.util.EcoreUtil
import edu.kit.ipd.sdq.kamp.ruledsl.util.ErrorHandlingUtil
import edu.kit.ipd.sdq.kamp.util.LookupUtil
import edu.kit.ipd.sdq.kamp.util.ModificationMarkCreationUtil
import java.util.Collection
import java.util.Collections
import java.util.Map
import java.util.Set
import java.util.stream.Collectors
import java.util.stream.Stream
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.jface.dialogs.ErrorDialog
import org.eclipse.swt.widgets.Shell
import org.eclipse.ui.PlatformUI
import org.eclipse.xtext.common.types.JvmDeclaredType
import org.eclipse.xtext.common.types.JvmGenericType
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.osgi.framework.FrameworkUtil

import static edu.kit.ipd.sdq.kamp.ruledsl.util.EcoreUtil.*

import static extension edu.kit.ipd.sdq.kamp.ruledsl.util.KampRuleLanguageEcoreUtil.*
import edu.kit.ipd.sdq.kamp.model.modificationmarks.AbstractModification

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class KampRuleLanguageJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder
	

	/** associates a variable name with a {@link Lookup} */
	private Map<Lookup, String> nameForLookup;
	
	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the lambda you pass as the last argument.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	def dispatch void infer(KampRule rule, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {		
		val className = rule.getClassName();
		val clazz = rule.toClass(className);
		clazz.packageName = "gen.rule";
		
		// First check if the project has the JRE on classpath
		// TODO this might not be the best way to do this, but it works
		try {
			annotationRef(Override)
		} catch(IllegalArgumentException e) {
			e.printStackTrace;
			System.err.println("This error is probably caused by JRE not being activated for the project which contains the rules.karl file.")
			
			// show a dialog
			PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
				override void run() {
					val Shell shell = PlatformUI.getWorkbench().getDisplay().getActiveShell();
					ErrorDialog.openError(shell, "Error", "The JRE is not on classpath. You must convert the KAMP project to a Java Plugin Project!", ErrorHandlingUtil.createMultiStatus(FrameworkUtil.getBundle(KampRuleLanguageJvmModelInferrer).getSymbolicName(), e.getLocalizedMessage(), e));
				}
			});	
			
			return;
		}
		
		acceptor.accept(clazz,
			[ theClass |
				// theClass.extendedInterfaces += theClass.typeRef(typeRef(String))
				nameForLookup = newHashMap
				theClass.superTypes += typeRef(IRule)
							
				val applyMethod = rule.toMethod(getMethodName(), typeRef("void")) [
					parameters += rule.toParameter("version", typeRef(AbstractArchitectureVersion, wildcard()))
					parameters += rule.toParameter("registry", typeRef(ChangePropagationStepRegistry))
					
					nameForLookup.put(null, "input")
					if(rule.modificationMark !== null) {
						
						// the target type: «getReturnType(rule.lookups.last)».class - is not used anymore because we use generics to ensure it matches
						body = '''
							«LookupUtil».lookup(version, «typeRef(rule.source.metaclass.instanceTypeName)».class, «rule.getClassName»::«rule.getLookupMethodName(rule.lookups.last)»)
								.forEach((result) -> {			 
									«AbstractModification»<?, ?> modificationMark = «ModificationMarkCreationUtil».createModificationMark(result, «rule.modificationMark.type.qualifiedName».eINSTANCE.«rule.modificationMark.memberRef»());
									«ModificationMarkCreationUtil».insertModificationMark(modificationMark, registry, «rule.modificationMark.target.qualifiedName».class, "«rule.modificationMark.targetMethod»");
								});
						'''
					} else {
						body = ''''''
					}
				];
				
				applyMethod.annotations += annotationRef(Override)
			
				try {
					val lookupMethod = rule.toMethod(rule.getLookupMethodName(rule.lookups.last), null) [
					parameters += rule.toParameter(rule.source.metaclass.name.toFirstLower, typeRef(rule.source.metaclass.instanceTypeName))		
					//if(rule.isVersionParameterRequired()) {	// pass it always as we would have the BiFunction declaration in the utility method of apply
						parameters += rule.toParameter("version", typeRef(AbstractArchitectureVersion, wildcard()))
					//}
	
					nameForLookup.put(null, "input")
					body = '''
						«typeRef(Collection, typeRef(rule.source.metaclass.instanceTypeName))» input = «Collections».singleton(«rule.source.metaclass.name.toFirstLower»);
						
						«FOR x : rule.lookups»
							«x.generateCodeForRule(theClass)»
						«ENDFOR»
						
						return «nameForLookup.get(rule.lookups.last)».collect(«typeRef(Collectors)».toSet());
					'''
				];

				lookupMethod.returnType = Set.typeRef(typeRef(getReturnType(rule.lookups.last)))			
				lookupMethod.static = true;
				theClass.members += lookupMethod	
			} catch(Exception e) {
				e.printStackTrace
				// TODO replace with proper exception handling
				System.err.println("Rule could not be created. Not fully defined? Name: " + rule.name)
			}	
							
			theClass.members += applyMethod;
		]);
	}
	
	def String getClassName(KampRule rule) {
		return rule.name.toFirstUpper + "Rule"
	}
	
	def String getReturnType(Lookup lastLookup) {
		if(lastLookup instanceof ForwardEReference) {
			lastLookup.metaclass.instanceTypeName
		} else if(lastLookup instanceof BackwardEReference) {
			lastLookup.mclass.metaclass.instanceTypeName
		} else {
			Object.canonicalName
		}
	}
	
	def dispatch String getLookupMethodName(KampRule rule, Lookup lookup) {
		'lookup'
	}
	
	def dispatch String getLookupMethodName(KampRule rule, ForwardEReference reference) {
		'lookup' + reference.metaclass.name + 'from' + rule.source.metaclass.name
	}
	
	def dispatch String getLookupMethodName(KampRule rule, BackwardEReference reference) {
		'lookup' + reference.mclass.metaclass.name.toFirstUpper + 'from' + rule.source.metaclass.name
	}
	
	// this one is the entry point and must address the interface method which must be overridden
	def String getMethodName() {
		'''apply'''
	}
	
	/**
	 * <p>Generates the code that is embedded in the method if the given lookup
	 * is found in a chain of lookups of one rule.
	 * 
	 * <p>The rule file can be navigated using the given lookup and methods in
	 * {@link EcoreUtil}.
	 * 
	 * @param lookup the Lookup to generate the code for. There should be a
	 * dispatch method for every sub type. Otherwise the generator will throw
	 * a runtime exception.
	 * 
	 * @param typeToAddTo the class that is currently generated. Can be used to add further
	 * methods or fields with the injected extension {@link JvmTypesBuilder}.
	 */	
	def dispatch generateCodeForRule(Lookup lookup, JvmGenericType typeToAddTo) {
		'''// rule: «lookup?.toString», pre: «getPreviousSiblingOfType(lookup, Lookup)?.toString»'''
	}
	
	// TODO changeVarName!!!!!!!!!!!!!!! There might be multiple variables with the same name...
	
	/**
	 * @see #generateCodeForRule(Lookup, JvmGenericType)
	 */
	def dispatch generateCodeForRule(ForwardEReference ref, JvmGenericType typeToAddTo) {
		var varName = '''marked«ref.metaclass.name.toFirstUpper»'''
		nameForLookup.put(ref, varName)
		
		var String inputMethod = "";
		
		if(nameForLookup.get(getPreviousSiblingOfType(ref, Lookup)) === null)
			inputMethod = ".stream()";
		
		'''
			«Stream.canonicalName»<«ref.metaclass.instanceTypeName»> «varName» = «nameForLookup.get(getPreviousSiblingOfType(ref, Lookup))»''' + inputMethod + '''
				«IF ref.feature.many»
					.flatMap(it -> 
						it.get«ref.feature.name.toFirstUpper»().stream());
				«ELSE»
					.map(it -> it.get«ref.feature.name.toFirstUpper()»());
				«ENDIF»
		'''
	}

	/**
	 * @see #generateCodeForRule(Lookup, JvmGenericType)
	 */
	def dispatch generateCodeForRule(BackwardEReference ref, JvmGenericType typeToAddTo) {
		var varName = '''backmarked«ref.mclass.metaclass.name.toFirstUpper»''' 
		nameForLookup.put(ref, varName)
		
		'''
			«Stream.canonicalName»<«ref.mclass.metaclass.instanceTypeName»> «varName» = «LookupUtil.canonicalName».lookupBackreference(version, «ref.mclass.metaclass.instanceTypeName».class, «nameForLookup.get(getPreviousSiblingOfType(ref, Lookup))»).stream();
		'''
	}
	
	// we do not use this anymore because we always pass the version parameter
	def isVersionParameterRequired(KampRule rule) {
		rule.lookups.exists[r | r instanceof BackwardEReference];	
	}
}
