	public void calculateInterBusinessProcessPropagation(BPArchitectureVersion version) {
		// Create only one modification mark per element in this propagation step
		Map<EObject, AbstractModification<?,EObject>> elementsMarkedInThisStep = 
				new HashMap<EObject, AbstractModification<?,EObject>>();
		
		// TODO determine calling project name
		boolean runStandardRules = true;
		try(KampLanguageService languageService = KampRuleLanguageFacade.getService("MartinTest1")) {
			IRuleProvider provider = languageService.getService();
			provider.applyAllRules();
			runStandardRules = provider.areStandardRulesEnabled();
		} catch (Exception e) {
			// TODO should be only thrown if service is not available
			e.printStackTrace();
		};
		
		if(runStandardRules) {
			System.out.println("Processing standard rules...");
			// 1 Role (OrganizationEnvironmentModel) -> ActorStep
			calculateAndMarkRoleToActorStepPropagation(version, elementsMarkedInThisStep);
			// 2 ActorStep -> ActorStep/EntryLevelSystemCall
			calculateAndMarkActorStepToActorStepAndELSCPropagation(version, elementsMarkedInThisStep);
			// 3 DeviceResource -> Acquire-/ReleaseDeviceResourceAction and actions between
			calculateAndMarkDeviceResourceToDeviceResourceActionPropagation(version, elementsMarkedInThisStep);
			// 4 Signature -> EntryLevelSystemCall
			calculateAndMarkSignatureToEntryLevelSystemCallPropagation(version, elementsMarkedInThisStep);
		} else {
			System.out.println("Standard rules disabled by custom rule provider.");
		}
		
		//If no at all changes: remove top-level element from tree
		if (this.getInterBusinessProcessPropagation().eContents().isEmpty()) {			
			version.getModificationMarkRepository().getChangePropagationSteps().remove(
					this.getInterBusinessProcessPropagation());	
		}
	}