/**
 * generated by Xtext 2.10.0
 */
package edu.kit.ipd.sdq.kamp.ruledsl;

import com.google.inject.Binder;
import com.google.inject.name.Names;
import edu.kit.ipd.sdq.kamp.ruledsl.AbstractKampRuleLanguageRuntimeModule;
import edu.kit.ipd.sdq.kamp.ruledsl.linking.KampRuleLanguageLinkingService;
import edu.kit.ipd.sdq.kamp.ruledsl.scoping.KampRuleLanguageGlobalScopeProvider;
import edu.kit.ipd.sdq.kamp.ruledsl.scoping.KampRuleLanguageScopeProviderDelegate;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import tools.vitruv.dsls.mirbase.scoping.MirBaseQualifiedNameConverter;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("all")
public class KampRuleLanguageRuntimeModule extends AbstractKampRuleLanguageRuntimeModule {
  @Override
  public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
    return KampRuleLanguageGlobalScopeProvider.class;
  }
  
  @Override
  public void configureIScopeProviderDelegate(final Binder binder) {
    binder.<IScopeProvider>bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(KampRuleLanguageScopeProviderDelegate.class);
  }
  
  @Override
  public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
    return MirBaseQualifiedNameConverter.class;
  }
  
  @Override
  public Class<? extends ILinkingService> bindILinkingService() {
    return KampRuleLanguageLinkingService.class;
  }
}
